FILE 1: ../data-annotation-kfs-zihan/app.py
"""
from flask import Flask, render_template, request, jsonify, redirect, url_for, send_from_directory
import os
import base64
import shutil
from PIL import Image
import json
import io

app = Flask(__name__)

# with open('data/questions.json') as f:
#     questions = json.load(f)

# Load questions data
with open('data/questions-all-formatted.json') as f:
    questions = json.load(f)

@app.route('/')
def index():
    return render_template('welcome.html')

@app.route('/start_annotation')
def start_annotation():
    return redirect(url_for('annotate', video_id=0, question_id=0))

@app.route('/annotate/<int:video_id>/<int:question_id>')
def annotate(video_id, question_id):
    if 0 <= video_id < len(questions):
        video = questions[video_id]
        if 0 <= question_id < len(video["questions"]):
            question_text = video["questions"][question_id]
            video_path = f'../../static/clip_videos/{video["video_name"]}'
            annotation_folder = f'static/annotations/{os.path.splitext(video["video_name"])[0]}/snapshots'

            # Clear previously loaded cache
            snapshots = []
            if os.path.exists(annotation_folder):
                snapshots = [f'/{annotation_folder}/{file}' for file in os.listdir(annotation_folder) if file.endswith('.jpg')]

            return render_template('annotate.html', video_id=video_id, question_id=question_id, video_path=video_path, snapshots=snapshots, total_questions=len(video["questions"]), question_text=question_text, total_videos=len(questions))
    return "Video ID or Question ID out of range", 404

@app.route('/data/<path:filename>')
def return_file(filename):
    return send_from_directory('data', filename)

@app.route('/delete_frame/<int:video_id>/<string:frame_name>', methods=['POST'])
def delete_frame(video_id, frame_name):
    question = questions[video_id]
    annotation_folder = f'data/annotations/{os.path.splitext(question["video_name"])[0]}/snapshots'
    frame_path = f'{annotation_folder}/{frame_name}'
    if os.path.exists(frame_path):
        os.remove(frame_path)
    return jsonify({"status": "success"})

@app.route('/save_frame/<int:video_id>', methods=['POST'])
def save_frame(video_id):
    data = request.get_json()
    snapshot = data.get("snapshot")
    frame_number = data.get("frame_number")

    if not snapshot or frame_number is None:
        return jsonify({"status": "error", "message": "Invalid data."}), 400

    question = questions[video_id]
    annotation_folder = f'data/annotations/{os.path.splitext(question["video_name"])[0]}/snapshots'
    os.makedirs(annotation_folder, exist_ok=True)

    # Save the snapshot as a compressed image with a unique name
    image_data = base64.b64decode(snapshot.split(",")[1])
    image = Image.open(io.BytesIO(image_data))
    image = image.convert("RGB")
    unique_filename = f'frame_{frame_number}.jpg'
    compressed_path = f'{annotation_folder}/{unique_filename}'
    image.save(compressed_path, "JPEG", quality=50)

    return jsonify({"status": "success", "snapshot_path": f'/static/{compressed_path}'})

if __name__ == '__main__':
    app.run(port=5001, debug=True)
"""
FILE 2: ../data-annotation-kfs-zihan/templates/annotate.html
"""
<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <title>标注界面</title>
    <script>
        const videoId = {{ video_id }};
        const questionId = {{ question_id }};
        const totalQuestions = {{ total_questions }};
        const totalVideos = {{ total_videos }};
    </script>
    <script src="{{ url_for('static', filename='js/annotation.js') }}"></script>
</head>
<body>
    <h1>标注界面</h1>
    <div id="progress">
        当前视频第 <span id="current-video">{{ video_id + 1 }}</span> 个，共 <span id="total-videos">{{ total_videos }}</span> 个视频
        <br>
        当前问题第 <span id="current-question">{{ question_id + 1 }}</span> 个，共 <span id="total-questions">{{ total_questions }}</span> 个问题
    </div>
    <div id="question-container">
        <p id="question-text">{{ question_text }}</p>
    </div>
    <video id="video-player" width="640" height="480" controls>
        <source id="video-source" src="{{ video_path }}" type="video/mp4">
        您的浏览器不支持视频标签。
    </video>
    <div>
        <button onclick="navigateQuestion(-1)">上一个问题</button>
        <button onclick="navigateQuestion(1)">下一个问题</button>
        <button onclick="navigateVideo(-1)">上一个视频</button>
        <button onclick="selectFrame()">选择当前帧</button>
        <button onclick="submitAnnotation()">提交标注</button>
        <button onclick="navigateVideo(1)">下一个视频</button>
    </div>
    <div id="snapshot-container">
        <h3>已选择的帧截图：</h3>
        <div id="snapshots"></div>
    </div>
    <script>
        // Load existing snapshots on page load
        snapshots.forEach(snapshotPath => loadSnapshot(snapshotPath));
    </script>
</body>
</html>


"""
FILE 3: ../data-annotation-kfs-zihan/static/js/annotation.js
"""
document.addEventListener("DOMContentLoaded", () => loadVideo(videoId));

function loadVideo(id) {
    const videoName = videoNames[id];
    document.getElementById("video-source").src = `/static/clip_videos/${videoName}`;
    document.getElementById("video-player").load();
    document.getElementById("current-video").textContent = id + 1;
}


function selectFrame() {
    const video = document.getElementById("video-player");
    const currentFrame = Math.floor(video.currentTime * 30); // Assume 30fps
    const canvas = document.createElement("canvas");
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    canvas.getContext("2d").drawImage(video, 0, 0, canvas.width, canvas.height);
    const snapshot = canvas.toDataURL("image/jpeg", 0.5);

    fetch(`/save_frame/${videoId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ snapshot, frame_number: currentFrame })
    }).then(response => response.json()).then(data => {
        if (data.status === "success") {
            loadSnapshot(data.snapshot_path);
        } else {
            alert("保存帧失败");
        }
    });
}

function loadSnapshot(snapshotPath) {
    const snapshotContainer = document.createElement("div");
    snapshotContainer.className = "snapshot-container";
    snapshotContainer.innerHTML = `<img src="${snapshotPath}" style="width: 160px; margin: 5px;"><button onclick="deleteFrame('${snapshotPath.split('/').pop()}')">删除</button>`;
    document.getElementById("snapshots").appendChild(snapshotContainer);
}

function deleteFrame(frameName) {
    fetch(`/delete_frame/${videoId}/${frameName}`, { method: 'POST' })
        .then(response => response.json())
        .then(data => {
            if (data.status === "success") {
                document.querySelector(`[src*="${frameName}"]`).parentElement.remove();
            } else {
                alert("删除帧失败");
            }
        });
}

function navigateVideo(direction) {
    const newVideoId = videoId + direction;
    if (newVideoId >= 0 && newVideoId < totalVideos) {
        window.location.href = `/annotate/${newVideoId}/0`; // 每次跳到新视频时，默认加载第一个问题
    } else {
        alert(direction === 1 ? "已经是最后一个视频了！" : "已经是第一个视频了！");
    }
}

function navigateQuestion(direction) {
    const newQuestionId = questionId + direction;
    if (newQuestionId >= 0 && newQuestionId < totalQuestions) {
        window.location.href = `/annotate/${videoId}/${newQuestionId}`;
    } else {
        alert(direction === 1 ? "已经是最后一个问题了！" : "已经是第一个问题了！");
    }
}

"""
